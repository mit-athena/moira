/* $Id$
 *
 * This generates the network table.
 *
 * Copyright (C) 1994-1998 by the Massachusetts Institute of Technology.
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#include <mit-copyright.h>
#include <moira.h>

#include <sys/stat.h>

#include <netinet/in.h>
#include <arpa/inet.h>

#include <string.h>
#include <stdio.h>
#include <time.h>

#include "util.h"

EXEC SQL INCLUDE sqlca;

RCSID("$HeadURL$ $Id$");

char *whoami = "network.gen";
char *db = "moira/moira";

int main(int argc, char **argv)
{
  FILE *out = stdout;
  char *outf = NULL, address[BUFSIZ], outft[MAXPATHLEN];
  struct timeval now;
  EXEC SQL BEGIN DECLARE SECTION;
  int id, mask;
  char name[SUBNET_NAME_SIZE], description[SUBNET_DESCRIPTION_SIZE];
  char saddr[SUBNET_SADDR_SIZE];
  EXEC SQL END DECLARE SECTION;

  EXEC SQL CONNECT :db;

  if (argc == 2)
    {
      outf = argv[1];
      sprintf(outft, "%s~", outf);
      if (!(out = fopen(outft, "w")))
	{
	  fprintf(stderr, "unable to open %s for output\n", outf);
	  exit(MR_OCONFIG);
	}
    }
  else if (argc != 1)
    {
      fprintf(stderr, "usage: %s [outfile]\n", argv[0]);
      exit(MR_ARGS);
    }
  else
    outf = NULL;

  EXEC SQL WHENEVER SQLERROR GOTO sqlerr;

  gettimeofday(&now, NULL);

  fprintf(out, "; MIT Network Table\n;\n");
  fprintf(out, "; \t%cAuthor: $\n", '$');
  fprintf(out, "; \t%cDate: $\n", '$');
  fprintf(out, "; \t%cRevision: $\n;\n", '$');
  fprintf(out, "; Network table generated by Moira at %s;\n",
	  ctime(&now.tv_sec));

  EXEC SQL DECLARE x CURSOR FOR SELECT
    name, snet_id, saddr, mask, description
    FROM subnet ORDER BY saddr;
  EXEC SQL OPEN x;
  while (1)
    {
      EXEC SQL FETCH x INTO :name, :id, :saddr, :mask, :description;
      if (sqlca.sqlcode)
	break;
      if (id == 0)
	continue;
      if (!strncmp(strtrim(name), "NONE", strlen("NONE")))
	  continue;
      if (!*strtrim(name))
	continue;

      sprintf(address, "%s/%d", strtrim(saddr), mask);
      fprintf(out, "NETWORK : %-16.16s : %-15.15s : %s\n", name,
	      address, strtrim(description));
    }

  EXEC SQL CLOSE x;

  EXEC SQL COMMIT;

  fprintf(out, "; End of automatically generated network table\n");
  if (fclose(out))
    {
      perror("close failed");
      exit(MR_CCONFIG);
    }
  if (outf)
    fix_file(outf);
  exit(MR_SUCCESS);

sqlerr:
  db_error(sqlca.sqlcode);
  exit(MR_DBMS_ERR);
}

