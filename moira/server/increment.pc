/* $id: increment.pc 4110 2013-05-09 15:43:17Z zacheiss $
 *
 * Deal with incremental updates
 *
 * Copyright (C) 1989-1998 by the Massachusetts Institute of Technology
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#include <mit-copyright.h>
#include "mr_server.h"
#include "query.h"
#include "qrtn.h"
#include "vis.h"

#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/param.h>

EXEC SQL INCLUDE sqlca;

RCSID("$HeadURL$ $Id$");

extern char *whoami;
extern char *table_name[];
extern int num_tables;

#define MAXARGC 20

EXEC SQL WHENEVER SQLERROR DO dbmserr();

EXEC SQL BEGIN DECLARE SECTION;
/* structures to save before args */
static char *before[MAXARGC];
static int beforec;
static enum tables beforetable;

/* structures to save after args */
static char *after[MAXARGC];
static int afterc;
EXEC SQL END DECLARE SECTION;

/* structures to save entire sets of incremental changes */
struct save_queue *incremental_sq = NULL;
struct iupdate {
  char *table;
  int beforec;
  char **before;
  int afterc;
  char **after;
  char *service;
};

char **copy_argv(char **argv, int argc);
void free_argv(char **argv, int argc);
int table_num(char *table);

void incremental_init(void)
{
  int i;

  if (!incremental_sq)
    incremental_sq = sq_create();

  for (i = 0; i < MAXARGC; i++)
    {
      before[i] = xmalloc(MAX_FIELD_WIDTH);
      after[i] = xmalloc(MAX_FIELD_WIDTH);
    }
}


/* record the state of a table row before it is changed */

void incremental_before(enum tables table, char *qual, char **argv)
{
  EXEC SQL BEGIN DECLARE SECTION;
  int id;
  EXEC SQL END DECLARE SECTION;

  char *name, *name2;

  beforetable = table;

  switch (table)
    {
    case USERS_TABLE:
      sprintf(stmt_buf, "SELECT u.login, u.unix_uid, u.shell, "
	      "u.winconsoleshell, u.last, u.first, u.middle, u.status, "
	      "u.clearid, u.type, u.users_id, u.winhomedir, u.winprofiledir, "
	      "u.potype, u.twofactor_status FROM users u WHERE %s", qual);
      dosql(before);
      beforec = 15;
      break;
    case MACHINE_TABLE:
      sprintf(stmt_buf, "SELECT m.name, m.mach_id, m.vendor, m.model, m.os, m.location, "
	      "m.contact, m.billing_contact, m.account_number, m.status, m.address, "
	      "m.owner_type, m.owner_id, m.acomment, m.ocomment, m.snet_id, m.use, "
	      "TO_CHAR(m.inuse, 'DD-mon-YYYY'), m.ttl FROM machine m "
	      "WHERE %s", qual);
      dosql(before);
      beforec = 19;
      name = xmalloc(0);
      id = atoi(before[12]);
      if (!strncmp(before[11], "USER", 4))
	{
	  id_to_name(id, USERS_TABLE, &name);
	  strcpy(before[12], name);
	}
      else if (!strncmp(before[11], "LIST", 4))
	{
	  id_to_name(id, LIST_TABLE, &name);
	  strcpy(before[12], name);
	}
      else if (!strncmp(before[11], "KERBEROS", 8))
	{
	  id_to_name(id, STRINGS_TABLE, &name);
	  strcpy(before[12], name);
	}
      else if (!strncmp(before[11], "NONE", 4))
	{
	  strcpy(before[12], "NONE");
	}
      id = atoi(before[13]);
      id_to_name(id, STRINGS_TABLE, &name);
      strcpy(before[13], name);
      id = atoi(before[14]);
      id_to_name(id, STRINGS_TABLE, &name);
      strcpy(before[14], name);
      id = atoi(before[15]);
      id_to_name(id, SUBNET_TABLE, &name);
      strcpy(before[15], name);
      break;
    case HOSTALIAS_TABLE:
      strcpy(before[0], argv[0]);
      strcpy(before[1], argv[1]);
      name_to_id(before[1], MACHINE_TABLE, &id);
      sprintf(before[2], "%d", id);
      beforec = 3;
      break;
    case HWADDRMAP_TABLE:
      strcpy(before[0], argv[0]);
      strcpy(before[1], argv[1]);
      name_to_id(before[1], MACHINE_TABLE, &id);
      sprintf(before[2], "%d", id);
      beforec = 3;
      break;
    case CLUSTERS_TABLE:
      sprintf(stmt_buf, "SELECT c.name, c.description, c.location, "
	      "c.clu_id FROM clusters c WHERE %s", qual);
      dosql(before);
      beforec = 4;
      break;
    case CONTAINERS_TABLE:
      sprintf(stmt_buf, "SELECT c.name, c.description, c.location, c.contact, "
	      "c.acl_type, c.acl_id, c.cnt_id, c.list_id FROM containers c "
	      "WHERE %s", qual);
      dosql(before);
      beforec = 8;
      name = xmalloc(0);
      id = atoi(before[5]);
      if (!strncmp(before[4], "USER", 4))
	{
	  id_to_name(id, USERS_TABLE, &name);
	  strcpy(before[5], name);
	}
      else if (!strncmp(before[4], "LIST", 4))
	{
	  id_to_name(id, LIST_TABLE, &name);
	  strcpy(before[5], name);
	}
      else if (!strncmp(before[4], "KERBEROS", 8))
	{
	  id_to_name(id, STRINGS_TABLE, &name);
	  strcpy(before[5], name);
	}
      id = atoi(before[7]);
      id_to_name(id, LIST_TABLE, &name);
      strcpy(before[7], name);
      break;
    case MCMAP_TABLE:
      strcpy(before[0], argv[0]);
      strcpy(before[1], argv[1]);
      beforec = 2;
      break;
    case MCNTMAP_TABLE:
      strcpy(before[0], argv[0]);
      strcpy(before[1], argv[1]);
      name_to_id(before[0], MACHINE_TABLE, &id);
      sprintf(before[2], "%d", id);
      name_to_id(before[1], CONTAINERS_TABLE, &id);
      sprintf(before[3], "%d", id);
      name = xmalloc(0);
      EXEC SQL SELECT list_id INTO :before[4] FROM containers
	WHERE cnt_id = :id;
      id = atoi(before[4]);
      id_to_name(id, LIST_TABLE, &name);
      strcpy(before[4], name);
      beforec = 5;
      break;
    case SVC_TABLE:
      strcpy(before[0], argv[0]);
      strcpy(before[1], argv[1]);
      strcpy(before[2], argv[2]);
      beforec = 3;
      break;
    case FILESYS_TABLE:
      sprintf(stmt_buf, "SELECT fs.label, fs.type, fs.mach_id, fs.name, "
	      "fs.mount, fs.rwaccess, fs.comments, fs.owner, fs.owners, "
	      "fs.createflg, fs.lockertype, fs.filsys_id FROM filesys fs "
	      "WHERE %s", qual);
      dosql(before);
      name = xmalloc(0);
      id = atoi(before[2]);
      id_to_name(id, MACHINE_TABLE, &name);
      strcpy(before[2], name);
      id = atoi(before[7]);
      id_to_name(id, USERS_TABLE, &name);
      strcpy(before[7], name);
      id = atoi(before[8]);
      id_to_name(id, LIST_TABLE, &name);
      strcpy(before[8], name);
      free(name);
      beforec = 12;
      break;
    case QUOTA_TABLE:
      strcpy(before[0], "?");
      strcpy(before[1], argv[1]);
      strcpy(before[2], "?");
      sprintf(stmt_buf, "SELECT q.quota, fs.name FROM quota q, filesys fs "
	      "WHERE %s AND fs.filsys_id = q.filsys_id", qual);
      dosql(&(before[3]));
      strcpy(before[2], argv[1]);
      beforec = 5;
      break;
    case LIST_TABLE:
      sprintf(stmt_buf, "SELECT l.name, l.active, l.publicflg, l.hidden, "
	      "l.maillist, l.grouplist, l.gid, l.acl_type, l.acl_id, "
	      "l.description, l.list_id, l.nfsgroup FROM list l WHERE %s", qual);
      dosql(before);
      beforec = 12;
      break;
    case IMEMBERS_TABLE:
      id = (int)(long)argv[0];
      sprintf(stmt_buf, "SELECT active, publicflg, hidden, maillist, "
	      "grouplist, gid, nfsgroup FROM list WHERE list_id = %d", id);
      dosql(&(before[3]));
      name = xmalloc(0);
      id_to_name(id, LIST_TABLE, &name);
      name2 = xmalloc(0);
      strcpy(before[0], name);
      strcpy(before[1], argv[1]);
      id = (int)(long)argv[2];
      beforec = 11;
      if (!strcmp(before[1], "USER"))
	{
	  id_to_name(id, USERS_TABLE, &name2);
	  EXEC SQL SELECT status, users_id INTO :before[10], :before[12] 
	    FROM users WHERE users_id = :id;
	  EXEC SQL SELECT list_id INTO :before[11] FROM list
	    WHERE name = :name;
	  beforec = 13;
      }
      else if (!strcmp(before[1], "LIST"))
	{
	  id_to_name(id, LIST_TABLE, &name2);
	  EXEC SQL SELECT list_id INTO :before[10] FROM list
	    WHERE name = :name;
	  sprintf(before[11], "%d", id);
	  beforec = 12;
	}
      else if (!strcmp(before[1], "STRING") || !strcmp(before[1], "KERBEROS"))
	{
	  id_to_name(id, STRINGS_TABLE, &name2);
	  EXEC SQL SELECT list_id INTO :before[10] FROM list
	    WHERE name = :name;
	}
      else if (!strcmp(before[1], "MACHINE"))
	{
	  id_to_name(id, MACHINE_TABLE, &name2);
	  EXEC SQL SELECT list_id INTO :before[10] FROM list
	    WHERE name = :name;
	  sprintf(before[11], "%d", id);
	  beforec = 12;
	}
      strcpy(before[2], name2);
      free(name);
      free(name2);
      break;
    default:
	/*
	com_err(whoami, 0, "requested incremental on unexpected table `%s'",
		table_name[table]);
	*/
      break;
    }
}


void incremental_clear_before(void)
{
  beforec = 0;
}


/* add an element to the incremental queue for the changed row */

void incremental_after(enum tables table, char *qual, char **argv)
{
  char *name, *name2;
  EXEC SQL BEGIN DECLARE SECTION;
  int id; 
  EXEC SQL END DECLARE SECTION;
  struct iupdate *iu;

  switch (table)
    {
    case USERS_TABLE:
      sprintf(stmt_buf, "SELECT u.login, u.unix_uid, u.shell, "
	      "u.winconsoleshell, u.last, u.first, u.middle, u.status, "
	      "u.clearid, u.type, u.users_id, u.winhomedir, u.winprofiledir, "
	      "u.potype, u.twofactor_status FROM users u WHERE %s", qual);
      dosql(after);
      afterc = 15;
      break;
    case MACHINE_TABLE:
      sprintf(stmt_buf, "SELECT m.name, m.mach_id, m.vendor, m.model, m.os, m.location, "
              "m.contact, m.billing_contact, m.account_number, m.status, m.address, "
              "m.owner_type, m.owner_id, m.acomment, m.ocomment, m.snet_id, m.use, "
	      "TO_CHAR(m.inuse, 'DD-mon-YYYY'), m.ttl FROM machine m "
              "WHERE %s", qual);
      dosql(after);
      afterc = 19;
      name = xmalloc(0);
      id = atoi(after[12]);
      if (!strncmp(after[11], "USER", 4))
        { 
          id_to_name(id, USERS_TABLE, &name);
          strcpy(after[12], name);
        }
      else if (!strncmp(after[11], "LIST", 4))
        {
          id_to_name(id, LIST_TABLE, &name);
          strcpy(after[12], name);
        }
      else if (!strncmp(after[11], "KERBEROS", 8))
        {
          id_to_name(id, STRINGS_TABLE, &name);
          strcpy(after[12], name);
        }
      else if (!strncmp(after[11], "NONE", 4))
	{
	  strcpy(after[12], "NONE");
	}
      id = atoi(after[13]);
      id_to_name(id, STRINGS_TABLE, &name);
      strcpy(after[13], name);
      id = atoi(after[14]);
      id_to_name(id, STRINGS_TABLE, &name);
      strcpy(after[14], name);
      id = atoi(after[15]);
      id_to_name(id, SUBNET_TABLE, &name);
      strcpy(after[15], name);
      break;
    case HOSTALIAS_TABLE:
      strcpy(after[0], argv[0]);
      strcpy(after[1], argv[1]);
      name_to_id(after[1], MACHINE_TABLE, &id);
      sprintf(after[2], "%d", id);
      afterc = 3;
      break;
    case HWADDRMAP_TABLE:
      strcpy(after[0], argv[0]);
      strcpy(after[1], argv[1]);
      name_to_id(after[1], MACHINE_TABLE, &id);
      sprintf(after[2], "%d", id);
      afterc = 3;
      break;
    case CLUSTERS_TABLE:
      sprintf(stmt_buf, "SELECT c.name, c.description, c.location, "
	      "c.clu_id FROM clusters c WHERE %s", qual);
      dosql(after);
      afterc = 4;
      break;
    case CONTAINERS_TABLE:
      sprintf(stmt_buf, "SELECT c.name, c.description, c.location, c.contact, "
	      "c.acl_type, c.acl_id, c.cnt_id, c.list_id FROM containers c "
	      "WHERE %s", qual);
      dosql(after);
      afterc = 8;
      name = xmalloc(0);
      id = atoi(after[5]);
      if (!strncmp(after[4], "USER", 4))
	{
	  id_to_name(id, USERS_TABLE, &name);
	  strcpy(after[5], name);
	}
      else if (!strncmp(after[4], "LIST", 4))
	{
	  id_to_name(id, LIST_TABLE, &name);
	  strcpy(after[5], name);
	}
      else if (!strncmp(after[4], "KERBEROS", 8))
	{
	  id_to_name(id, STRINGS_TABLE, &name);
	  strcpy(after[5], name);
	}
      id = atoi(after[7]);
      id_to_name(id, LIST_TABLE, &name);
      strcpy(after[7], name);
      break;
    case MCMAP_TABLE:
      strcpy(after[0], argv[0]);
      strcpy(after[1], argv[1]);
      afterc = 2;
      break;
    case MCNTMAP_TABLE:
      strcpy(after[0], argv[0]);
      strcpy(after[1], argv[1]);
      name_to_id(after[0], MACHINE_TABLE, &id);
      sprintf(after[2], "%d", id);
      name_to_id(after[1], CONTAINERS_TABLE, &id);
      sprintf(after[3], "%d", id);
      name = xmalloc(0);
      EXEC SQL SELECT list_id INTO :after[4] FROM containers
	WHERE cnt_id = :id;
      id = atoi(after[4]);
      id_to_name(id, LIST_TABLE, &name);
      strcpy(after[4], name);
      afterc = 5;
      break;
    case SVC_TABLE:
      strcpy(after[0], argv[0]);
      strcpy(after[1], argv[1]);
      strcpy(after[2], argv[2]);
      afterc = 3;
      break;
    case FILESYS_TABLE:
      sprintf(stmt_buf, "SELECT fs.label, fs.type, fs.mach_id, fs.name, "
	      "fs.mount, fs.rwaccess, fs.comments, fs.owner, fs.owners, "
	      "fs.createflg, fs.lockertype, fs.filsys_id FROM filesys fs "
	      "WHERE %s", qual);
      dosql(after);
      name = xmalloc(0);
      id = atoi(after[2]);
      id_to_name(id, MACHINE_TABLE, &name);
      strcpy(after[2], name);
      id = atoi(after[7]);
      id_to_name(id, USERS_TABLE, &name);
      strcpy(after[7], name);
      id = atoi(after[8]);
      id_to_name(id, LIST_TABLE, &name);
      strcpy(after[8], name);
      free(name);
      afterc = 12;
      break;
    case QUOTA_TABLE:
      strcpy(after[0], "?");
      strcpy(after[1], argv[1]);
      strcpy(after[2], "?");
      sprintf(stmt_buf, "SELECT q.quota, fs.name FROM quota q, filesys fs "
	      "WHERE %s and fs.filsys_id = q.filsys_id and q.type = '%s'",
	      qual, argv[1]);
      dosql(&(after[3]));
      afterc = 5;
      break;
    case LIST_TABLE:
      sprintf(stmt_buf, "SELECT l.name, l.active, l.publicflg, l.hidden, "
	      "l.maillist, l.grouplist, l.gid, l.acl_type, l.acl_id, "
	      "l.description, l.list_id, l.nfsgroup FROM list l WHERE %s", qual);
      dosql(after);
      afterc = 12;
      break;
    case IMEMBERS_TABLE:
      id = (int)(long)argv[0];
      sprintf(stmt_buf, "SELECT active, publicflg, hidden, maillist, "
	      "grouplist, gid, nfsgroup FROM list WHERE list_id = %d", id);
      dosql(&(after[3]));
      name = xmalloc(0);
      id_to_name(id, LIST_TABLE, &name);
      name2 = xmalloc(0);
      strcpy(after[0], name);
      strcpy(after[1], argv[1]);
      id = (int)(long)argv[2];
      afterc = 11;
      if (!strcmp(after[1], "USER"))
	{
	  id_to_name(id, USERS_TABLE, &name2);
	  EXEC SQL SELECT status, users_id INTO :after[10], :after[12]
	    FROM users WHERE users_id = :id;
	  EXEC SQL SELECT list_id INTO :after[11] FROM list
	    WHERE name = :name;
	  afterc = 13;
	}
      else if (!strcmp(after[1], "LIST"))
	{
	  id_to_name(id, LIST_TABLE, &name2);
	  EXEC SQL SELECT list_id INTO :after[10] FROM list
	    WHERE name = :name;
	  sprintf(after[11], "%d", id);
	  afterc = 12;
	}
      else if (!strcmp(after[1], "STRING") || !strcmp(after[1], "KERBEROS"))
	{
	  id_to_name(id, STRINGS_TABLE, &name2);
	  EXEC SQL SELECT list_id INTO :after[10] FROM list
	    WHERE name = :name;
	}
      else if (!strcmp(after[1], "MACHINE"))
	{
	  id_to_name(id, MACHINE_TABLE, &name2);
	  EXEC SQL SELECT list_id INTO :after[10] FROM list
	    WHERE name = :name;
	  sprintf(after[11], "%d", id);
	  afterc = 12;
	}
      strcpy(after[2], name2);
      free(name);
      free(name2);
      break;
    case NO_TABLE:
      afterc = 0;
      table = beforetable;
      break;
    default:
	/*
	com_err(whoami, 0, "requested incremental on unexpected table `%s'",
		table_name[table]);
	*/
      break;
    }

  iu = xmalloc(sizeof(struct iupdate));
  iu->table = table_name[table];
  iu->beforec = beforec;
  iu->before = copy_argv(before, beforec);
  iu->afterc = afterc;
  iu->after = copy_argv(after, afterc);
  sq_save_data(incremental_sq, iu);
}

void incremental_clear_after(void)
{
  incremental_after(NO_TABLE, NULL, NULL);
}


/* Called when the current transaction is committed to start any queued
 * incremental updates.  This caches the update table the first time it
 * is called.
 */

struct inc_cache {
  struct inc_cache *next;
  char *table, *service;
};


void incremental_update(void)
{
  static int inited = 0;
  static struct inc_cache *cache;
  struct inc_cache *c;
  EXEC SQL BEGIN DECLARE SECTION;
  char tab[INCREMENTAL_TABLE_NAME_SIZE], serv[INCREMENTAL_SERVICE_SIZE];
  EXEC SQL END DECLARE SECTION;
  struct iupdate *iu;
  void *before_flattened = NULL, *after_flattened = NULL;
  char *before_encoded = NULL, *after_encoded = NULL;
  int i, length = 0;

  if (!inited)
    {
      inited++;

      EXEC SQL DECLARE inc CURSOR FOR SELECT table_name, service
	FROM incremental;
      EXEC SQL OPEN inc;
      while (1)
	{
	  EXEC SQL FETCH inc INTO :tab, :serv;
	  if (sqlca.sqlcode)
	    break;
	  c = xmalloc(sizeof(struct inc_cache));
	  c->next = cache;
	  c->table = xstrdup(strtrim(tab));
	  c->service = xstrdup(strtrim(serv));
	  cache = c;
	}
      EXEC SQL CLOSE inc;
      EXEC SQL COMMIT WORK;
    }

  while (sq_remove_data(incremental_sq, &iu))
    {
      for (c = cache; c; c = c->next)
	{
	  if (!strcmp(c->table, iu->table))
	    {
	      iu->service = c->service;

	      /* Flatten argvs */
	      if (iu->beforec > 0)
		{
		  before_flattened = xmalloc(iu->beforec * MAX_FIELD_WIDTH);
		  length = 0;

		  for (i = 0; i < iu->beforec; i++)
		    {
		      memcpy(before_flattened + length, iu->before[i], strlen(iu->before[i]) + 1);
		      length += strlen(iu->before[i]) + 1;
		    }
		  
		  before_encoded = xmalloc(4 * iu->beforec * MAX_FIELD_WIDTH + 1);
		  strvisx(before_encoded, before_flattened, length, VIS_CSTYLE);
		}
	      
	      if (iu->afterc > 0)
		{
		  after_flattened = xmalloc(iu->afterc * MAX_FIELD_WIDTH);
		  length = 0;
		  
		  for (i = 0; i < iu->afterc; i++)
		    {
		      memcpy(after_flattened + length, iu->after[i], strlen(iu->after[i]) + 1);
		      length += strlen(iu->after[i]) + 1;
		    }
		  
		  after_encoded = xmalloc(4 * iu->afterc * MAX_FIELD_WIDTH + 1);
		  strvisx(after_encoded, after_flattened, length, VIS_CSTYLE);
		}
	      
	      /* Stick into DB */
	      EXEC SQL INSERT INTO incremental_queue
		(incremental_id, table_name, service, beforec, afterc, before, after, timestamp)
		VALUES (incremental_seq.nextval, :iu->table, :iu->service, :iu->beforec, :iu->afterc, 
			NVL(:before_encoded, CHR(0)), NVL(:after_encoded, CHR(0)), SYSTIMESTAMP);
	      EXEC SQL COMMIT WORK;

	      if (before_flattened)
		{
		  free(before_flattened);
		  before_flattened = NULL;
		}
	      if (before_encoded)
		{
		  free(before_encoded);
		  before_encoded = NULL;
		}
	      if (after_flattened)
		{
		  free(after_flattened);
		  after_flattened = NULL;
		}
	      if (after_encoded)
		{
		  free(after_encoded);
		  after_encoded = NULL;
		}
	    }
	}

      if (!c)
	{
	  free_argv(iu->before, iu->beforec);
	  free_argv(iu->after, iu->afterc);
	  free(iu);
	}
    }
} 

/* Called when the current transaction is aborted to throw away any queued
 * incremental updates
 */

void incremental_flush(void)
{
  struct iupdate *iu;

  while (sq_get_data(incremental_sq, &iu))
    {
      free_argv(iu->before, iu->beforec);
      free_argv(iu->after, iu->afterc);
      free(iu);
    }
  sq_destroy(incremental_sq);
  incremental_sq = sq_create();
}


char **copy_argv(char **argv, int argc)
{
  char **ret = xmalloc(sizeof(char *) * argc);
  while (--argc >= 0)
    ret[argc] = xstrdup(strtrim(argv[argc]));
  return ret;
}

void free_argv(char **argv, int argc)
{
  while (--argc >= 0)
    free(argv[argc]);
  free(argv);
}

int table_num(char *name)
{
  int i;

  for (i = num_tables - 1; i; i--)
    {
      if (!strcmp(table_name[i], name))
	break;
    }

  return i; /* 0 = "none" if no match */
}
